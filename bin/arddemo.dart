// Copyright 2016 John McDole <john@mcdole.org>
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import 'dart:async';
import 'dart:io';

import 'package:ardknob/ardproto.dart';
import 'package:ardknob/pages.dart';

import 'package:serial_port/serial_port.dart';

DateTime _start = new DateTime.now();

/// TODO(codefu): Remember that the display / ram is in column / page order.
/// We could implement all the pixel math here and send just what is needed,
/// in raw-page memory, and only reset / redraw the pages that were touched.

log(str) => print("${new DateTime.now().difference(_start)} $str");

main(List<String> args) async {
  var port = args.isEmpty ? "COM3" : args.first;
  port = new SerialPort(port, baudrate: 115200);

  try {
    await port.open();
  } catch (e) {
    print("Error($e) listening to $port: ${e.stackTrace}");
    exit(-1);
  }

  var proto = new ArdProto(port);

  var book = new Book('demo', proto, debug: false, pageKnobId: 2)
    ..add(new DemoPage('codefu', (page) => page.display.text("codefu")))
    ..add(new DemoPage('was here', (page) => page.display.text("was here")))
    ..add(new DemoPage(
        'rect',
        (page) =>
            page.display.rectangle(page.x, page.y, 40, 40, 1, fill: false)))
    ..add(new DemoPage(
        'filled rect',
        (page) =>
            page.display.rectangle(page.x, page.y, 40, 40, 1, fill: true)))
    ..add(new DemoPage('rounded rect',
        (page) => page.display.rectangle(page.x, page.y, 40, 40, 1, radius: 8)))
    ..add(new DemoPage(
        'filled rounted rect',
        (page) => page.display
            .rectangle(page.x, page.y, 40, 40, 1, radius: 8, fill: true)))
    ..add(new DemoPage('circle',
        (page) => page.display.circle(page.x + 20, page.y + 20, 20, 1)))
    ..add(new DemoPage(
        'filled circle',
        (page) =>
            page.display.circle(page.x + 20, page.y + 20, 20, 1, fill: true)))
    ..add(new DemoPage(
        'triangle',
        (page) => page.display.triangle(page.x + 20, page.y, page.x,
            page.y + 20, page.x + 40, page.y + 20, 1)))
    ..add(new DemoPage('filled triangle', (page) => page.display.triangle(page.x + 20, page.y, page.x, page.y + 20, page.x + 40, page.y + 20, 1, fill: true)))
    ..add(new DemoPage('bitmap', (page) => page.display.bitmap(page.x, page.y, codefu_width, codefu_height, 1, codefu_bits, xmb: true)));

  await new Future.delayed(const Duration(milliseconds: 10), () {});
  log(book.active);
  book.active.doIt();
}

class DemoPage extends Page {
  int x;
  int y;
  Function doSomething;

  DemoPage(String name, doSomething(Page page))
      : this.doSomething = doSomething,
        x = 0,
        y = 0,
        super(name);

  onKnob(KnobAction knob) {
    if (knob.id == 0) {
      if (knob.direction == Direction.left) {
        x--;
      } else if (knob.direction == Direction.right) {
        x++;
      } else
        return;
    }
    if (knob.id == 1) {
      if (knob.direction == Direction.left) {
        y--;
      } else if (knob.direction == Direction.right) {
        y++;
      } else
        return;
    }
    doIt();
  }

  doIt() {
    display.clear();
    display.cursor(x, y);
    doSomething(this);
    display.display();
  }

  onEvent(PageEvent event, var data) {
    if (event == PageEvent.onScreen) {
      doIt();
    }
  }
}

const int codefu_width = 117;
const int codefu_height = 30;
const List<int> codefu_bits = const <int>[
  0xe0, 0xf7, 0x01, 0xf8, 0x05, 0xfc, 0x3f, 0xe0, 0xff, 0x8f, 0xf7, 0x3f, //
  0xfc, 0xc1, 0x1b, 0xa0, 0xef, 0x01, 0xfe, 0x0b, 0xbc, 0x5f, 0xa0, 0xff, //
  0x8f, 0xff, 0x3f, 0xfc, 0xc1, 0x1d, 0x78, 0xff, 0x01, 0xff, 0x1d, 0xfc, //
  0xef, 0x40, 0xff, 0x0f, 0xff, 0x3b, 0xfc, 0xc1, 0x1d, 0xe8, 0xff, 0x81, //
  0xff, 0x3f, 0xfc, 0x7b, 0xc1, 0xff, 0x8f, 0xf7, 0x3f, 0xfc, 0xc1, 0x1f, //
  0xfc, 0xff, 0x81, 0xff, 0x7f, 0xfc, 0xff, 0xe1, 0xff, 0x8f, 0xf7, 0x3f, //
  0xa0, 0xc1, 0x0d, 0xf4, 0xb5, 0xc1, 0xff, 0x6f, 0xf0, 0x6c, 0xe5, 0xff, //
  0x8f, 0xff, 0x3f, 0xfc, 0xc1, 0x1b, 0xfc, 0x00, 0x80, 0x15, 0xbf, 0x7c, //
  0x78, 0x65, 0x07, 0x80, 0x3f, 0x00, 0xfc, 0xc1, 0x1b, 0xb8, 0x01, 0xc0, //
  0x1f, 0x3d, 0x7c, 0xf0, 0x60, 0x07, 0x80, 0x1f, 0x00, 0xfc, 0xc1, 0x1d, //
  0xf8, 0x00, 0xe0, 0x1f, 0x3a, 0x7c, 0xe8, 0xe0, 0x07, 0x80, 0x3f, 0x00, //
  0xfc, 0xc1, 0x17, 0xef, 0x00, 0xc0, 0x1f, 0x6e, 0x7c, 0xf0, 0x47, 0x07, //
  0x80, 0x1f, 0x00, 0xfc, 0xc1, 0x1a, 0xfa, 0x00, 0xe0, 0x1f, 0x7e, 0x3c, //
  0xf0, 0xe2, 0x07, 0x80, 0x3f, 0x00, 0xfc, 0xc1, 0x1a, 0xec, 0x00, 0xc0, //
  0x1f, 0x5e, 0x3c, 0xb0, 0x67, 0x5f, 0x82, 0xff, 0x1b, 0xfc, 0xc1, 0x1e, //
  0xf9, 0x00, 0xc0, 0x0f, 0x6e, 0x08, 0xf0, 0xe1, 0xff, 0x87, 0xff, 0x1d, //
  0xfc, 0xc1, 0x1f, 0xeb, 0x00, 0xc0, 0x1f, 0x7e, 0x38, 0xf0, 0x65, 0xff, //
  0x87, 0xff, 0x1f, 0xf8, 0xc1, 0x1f, 0xfb, 0x00, 0xe0, 0x1f, 0x2e, 0x6c, //
  0x38, 0x66, 0xff, 0x87, 0xff, 0x1f, 0xfc, 0xc1, 0x1d, 0xff, 0x00, 0xc0, //
  0x1f, 0xee, 0x6c, 0xf0, 0xc7, 0xff, 0x87, 0xff, 0x1f, 0xf8, 0x41, 0x1f, //
  0xff, 0x00, 0x20, 0x1d, 0xfe, 0x7c, 0xf0, 0x67, 0xfe, 0x87, 0xff, 0x1d, //
  0xf4, 0xc1, 0x1d, 0x7f, 0x00, 0x40, 0x1f, 0xfe, 0x3c, 0xf0, 0xe7, 0x07, //
  0x80, 0x1e, 0x00, 0xfc, 0xc1, 0x1f, 0xff, 0x00, 0x80, 0x1d, 0xfc, 0x3c, //
  0xf0, 0xe7, 0x07, 0x80, 0x3f, 0x00, 0xfc, 0xc1, 0x1f, 0xff, 0x00, 0x40, //
  0x0f, 0xfe, 0x3c, 0xf0, 0xe7, 0x07, 0x80, 0x1f, 0x00, 0xfc, 0xc0, 0x1f, //
  0xff, 0x00, 0xa0, 0x1f, 0xfe, 0x3c, 0xf8, 0x67, 0x07, 0x80, 0x1f, 0x00, //
  0xd8, 0xc1, 0x1f, 0xff, 0x00, 0x80, 0x1e, 0xfe, 0x5c, 0xf8, 0xe7, 0x07, //
  0x80, 0x3f, 0x00, 0x70, 0xc1, 0x1f, 0xff, 0x00, 0x00, 0x1b, 0xfe, 0x1c, //
  0xf8, 0xe7, 0x07, 0x80, 0x1f, 0x00, 0xf0, 0xe3, 0x1f, 0x9c, 0x01, 0x00, //
  0x1f, 0xea, 0x3c, 0xd0, 0xe5, 0xff, 0x8f, 0x1f, 0x00, 0xe0, 0x42, 0x0d, //
  0xfe, 0xdf, 0xc1, 0xbe, 0xbf, 0xbc, 0xff, 0xe3, 0xfd, 0x8f, 0x1b, 0x00, //
  0xf8, 0xff, 0x0f, 0xfe, 0xff, 0x81, 0xff, 0x7f, 0xfc, 0xff, 0xe3, 0xff, //
  0x0f, 0x34, 0x00, 0xd0, 0xff, 0x0f, 0xfc, 0xff, 0x81, 0xdc, 0x7f, 0xfc, //
  0xff, 0xe1, 0xfe, 0x0f, 0x11, 0x00, 0xd0, 0xff, 0x07, 0xf8, 0x7b, 0x01, //
  0xef, 0x3f, 0xf8, 0xfe, 0xe1, 0xff, 0x0f, 0x10, 0x00, 0xe0, 0xfe, 0x05, //
  0xf0, 0xff, 0x01, 0xf4, 0x1f, 0xf4, 0xff, 0xe0, 0xff, 0xcf, 0x3f, 0x00, //
  0x40, 0xff, 0x03, 0xc0, 0x0b, 0x00, 0xf8, 0x07, 0x94, 0x3b, 0xe0, 0xff, //
  0x8f, 0x1f, 0x00, 0x80, 0xff, 0x00 //
];
